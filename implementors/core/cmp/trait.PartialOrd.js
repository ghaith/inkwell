(function() {var implementors = {};
implementors["either"] = [{"text":"impl&lt;L:&nbsp;PartialOrd, R:&nbsp;PartialOrd&gt; PartialOrd&lt;Either&lt;L, R&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["inkwell"] = [{"text":"impl PartialOrd&lt;ComdatSelectionKind&gt; for ComdatSelectionKind","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;DWARFEmissionKind&gt; for DWARFEmissionKind","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;DWARFSourceLanguage&gt; for DWARFSourceLanguage","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Linkage&gt; for Linkage","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;FlagBehavior&gt; for FlagBehavior","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;UnnamedAddress&gt; for UnnamedAddress","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IntPredicate&gt; for IntPredicate","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;FloatPredicate&gt; for FloatPredicate","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;AtomicOrdering&gt; for AtomicOrdering","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;AtomicRMWBinOp&gt; for AtomicRMWBinOp","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;GlobalVisibility&gt; for GlobalVisibility","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;DLLStorageClass&gt; for DLLStorageClass","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;InlineAsmDialect&gt; for InlineAsmDialect","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl PartialOrd&lt;Ident&gt; for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl PartialOrd&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Position&gt; for Position","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Literal&gt; for Literal","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassUnicodeRange&gt; for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassBytesRange&gt; for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Sequence&gt; for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Range&gt; for Utf8Range","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;SmallVec&lt;A&gt;&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl PartialOrd&lt;Lifetime&gt; for Lifetime","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()