(function() {var implementors = {};
implementors["either"] = [{"text":"impl&lt;L, R&gt; Into&lt;Result&lt;R, L&gt;&gt; for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["inkwell"] = [{"text":"impl Into&lt;LLVMComdatSelectionKind&gt; for ComdatSelectionKind","synthetic":false,"types":[]},{"text":"impl&lt;'ctx&gt; Into&lt;Either&lt;FunctionValue&lt;'ctx&gt;, PointerValue&lt;'ctx&gt;&gt;&gt; for FunctionValue&lt;'ctx&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ctx&gt; Into&lt;Either&lt;FunctionValue&lt;'ctx&gt;, PointerValue&lt;'ctx&gt;&gt;&gt; for PointerValue&lt;'ctx&gt;","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMDWARFEmissionKind&gt; for DWARFEmissionKind","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMDWARFSourceLanguage&gt; for DWARFSourceLanguage","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMLinkage&gt; for Linkage","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMModuleFlagBehavior&gt; for FlagBehavior","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMUnnamedAddr&gt; for UnnamedAddress","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMOpcode&gt; for InstructionOpcode","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMIntPredicate&gt; for IntPredicate","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMRealPredicate&gt; for FloatPredicate","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMAtomicOrdering&gt; for AtomicOrdering","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMAtomicRMWBinOp&gt; for AtomicRMWBinOp","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMVisibility&gt; for GlobalVisibility","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMDLLStorageClass&gt; for DLLStorageClass","synthetic":false,"types":[]},{"text":"impl Into&lt;LLVMInlineAsmDialect&gt; for InlineAsmDialect","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()